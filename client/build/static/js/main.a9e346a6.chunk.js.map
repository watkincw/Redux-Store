{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","dispatch","useDispatch","cart","useSelector","state","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculatedTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","saveOrder","setTimeout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","initialState","reducer","action","newState","createStore","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a9e346a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n\tif (count === 1) {\n\t\treturn name\n\t}\n\treturn name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n\treturn new Promise((resolve, reject) => {\n\t\t// open connection to the database `shop-shop` with the version of 1\n\t\tconst request = window.indexedDB.open('shop-shop', 1);\n\n\t\t// create variables to hold reference to the database, transaction (tx), and object store\n\t\tlet db, tx, store;\n\n\t\t// if version has changed (or if this is the first time using the database), run this method and create the three object stores\n\t\trequest.onupgradeneeded = function(e) {\n\t\t\tconst db = request.result;\n\t\t\t// create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n\t\t\tdb.createObjectStore('products', { keyPath: '_id' });\n\t\t\tdb.createObjectStore('categories', { keyPath: '_id' });\n\t\t\tdb.createObjectStore('cart', { keyPath: '_id' });\n\t\t};\n\n\t\t// handle any errors with connecting\n\t\trequest.onerror = function(e) {\n\t\t\tconsole.log('There was an error');\n\t\t};\n\t\t// on database open success\n\t\trequest.onsuccess = function(e) {\n\t\t\t// save a reference of the database to the `db` variable\n\t\t\tdb = request.result;\n\t\t\t// open a transaction do whatever we pass into `storename` (must match one of the object store names)\n\t\t\ttx = db.transaction(storeName, 'readwrite');\n\t\t\t// save a reference to that object store\n\t\t\tstore = tx.objectStore(storeName);\n\t\n\t\t\t// if there's any errors, let us know\n\t\t\tdb.onerror = function(e) {\n\t\t\t\tconsole.log('error', e);\n\t\t\t};\n\t\n\t\t\tswitch (method) {\n\t\t\t\tcase 'put':\n\t\t\t\t\tstore.put(object);\n\t\t\t\t\tresolve(object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'get':\n\t\t\t\t\tconst all = store.getAll();\n\t\t\t\t\tall.onsuccess = function() {\n\t\t\t\t\t\tresolve(all.result);\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'delete':\n\t\t\t\t\tstore.delete(object._id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('No valid method');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t\t// when the transaction is complete, close the connection\n\t\t\ttx.oncomplete = function() {\n\t\t\t\tdb.close();\n\t\t\t};\n\t\t};\n\t});\n};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// replaces useStoreContext\nimport { useSelector, useDispatch } from 'react-redux';\n// utils\nimport { pluralize } from \"../../utils/helpers\";\nimport { idbPromise } from '../../utils/helpers';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n// import { useStoreContext } from '../../utils/GlobalState';\n\n\n\nfunction ProductItem(item) {\n\tconst {\n\t\timage,\n\t\tname,\n\t\t_id,\n\t\tprice,\n\t\tquantity\n\t} = item;\n\n\t// const [state, dispatch] = useStoreContext();\n\tconst dispatch = useDispatch();\n\tconst state = useSelector((state) => state);\n\n\tconst { cart } = state;\n\n\tconst addToCart = () => {\n\t\t// find the cart item with the matching id\n\t\tconst itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n\t\t// if there was a match, call the UPDATE with a new purchase quantity\n\t\tif (itemInCart) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\n\t\t\t\t_id: _id,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n\t\t\t});\n\t\t\tidbPromise('cart', 'put', {\n\t\t\t\t...itemInCart,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n\t\t\t});\n\t\t} else {\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_TO_CART,\n\t\t\t\tproduct: { ...item, purchaseQuantity: 1 }\n\t\t\t});\n\t\t\tidbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n\t\t}\n\t};\n\n\n\treturn (\n\t\t<div className=\"card px-1 py-1\">\n\t\t\t<Link to={`/products/${_id}`}>\n\t\t\t\t<img\n\t\t\t\t\talt={name}\n\t\t\t\t\tsrc={`/images/${image}`}\n\t\t\t\t/>\n\t\t\t\t<p>{name}</p>\n\t\t\t</Link>\n\t\t\t<div>\n\t\t\t\t<div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n\t\t\t\t<span>${price}</span>\n\t\t\t</div>\n\t\t\t<button onClick={ addToCart }>Add to cart</button>\n\t\t</div>\n\t);\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = 'UPDATE_PRODUCTS';\nexport const UPDATE_CATEGORIES = 'UPDATE_CATEGORIES';\nexport const UPDATE_CURRENT_CATEGORY = 'UPDATE_CURRENT_CATEGORY';\n\n// Shopping Cart actions\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n\tquery getProducts($category: ID) {\n\t\tproducts(category: $category) {\n\t\t\t_id\n\t\t\tname\n\t\t\tdescription\n\t\t\tprice\n\t\t\tquantity\n\t\t\timage\n\t\t\tcategory {\n\t\t\t\t_id\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n\t{\n\t\tproducts {\n\t\t\t_id\n\t\t\tname\n\t\t\tdescription\n\t\t\tprice\n\t\t\tquantity\n\t\t\tcategory {\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const QUERY_CATEGORIES = gql`\n\t{\n\t\tcategories {\n\t\t\t_id\n\t\t\tname\n\t\t}\n\t}\n`;\n\nexport const QUERY_USER = gql`\n\t{\n\t\tuser {\n\t\t\tfirstName\n\t\t\tlastName\n\t\t\torders {\n\t\t\t\t_id\n\t\t\t\tpurchaseDate\n\t\t\t\tproducts {\n\t\t\t\t\t_id\n\t\t\t\t\tname\n\t\t\t\t\tdescription\n\t\t\t\t\tprice\n\t\t\t\t\tquantity\n\t\t\t\t\timage\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n\tquery getCheckout($products: [ID]!) {\n\t\tcheckout(products: $products) {\n\t\t\tsession\n\t\t}\n\t}\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n// replaces useStoreContext\nimport { useSelector, useDispatch } from 'react-redux';\n// components\nimport ProductItem from '../ProductItem';\n// utils\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n// import { useStoreContext } from '../../utils/GlobalState';\n// assets\nimport spinner from '../../assets/spinner.gif';\n\n\nfunction ProductList() {\n\t// const [state, dispatch] = useStoreContext();\n\tconst dispatch = useDispatch();\n\tconst state = useSelector((state) => state);\n\n\tconst { currentCategory } = state;\n\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\n\tuseEffect(() => {\n\t\t// if there's data to be stored\n\t\tif (data) {\n\t\t\t// let's store it in the global state object\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\tproducts: data.products\n\t\t\t});\n\n\t\t\t// bet let's also take each product and save it to IndexedDB using the helper function\n\t\t\tdata.products.forEach((product) => {\n\t\t\t\tidbPromise('products', 'put', product);\n\t\t\t});\n\t\t\t// else if to check if `loading` is undefined in `use`Query()` Hook\n\t\t} else if (!loading) {\n\t\t\t// since we're offline, get all of the data from the `products` store\n\t\t\tidbPromise('products', 'get').then((products) => {\n\t\t\t\t// use retrieved data to set global state for offline browsing\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\t\tproducts: products\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [data, loading, dispatch]);\n\n\tfunction filterProducts() {\n\t\tif (!currentCategory) {\n\t\t\treturn state.products;\n\t\t}\n\t\treturn state.products.filter(product => product.category._id === currentCategory);\n\t}\n\n\t\n\n\treturn (\n\t\t<div className=\"my-2\">\n\t\t\t<h2>Our Products:</h2>\n\t\t\t{state.products.length ? (\n\t\t\t\t<div className=\"flex-row\">\n\t\t\t\t\t{filterProducts().map((product) => (\n\t\t\t\t\t\t<ProductItem\n\t\t\t\t\t\t\tkey={product._id}\n\t\t\t\t\t\t\t_id={product._id}\n\t\t\t\t\t\t\timage={product.image}\n\t\t\t\t\t\t\tname={product.name}\n\t\t\t\t\t\t\tprice={product.price}\n\t\t\t\t\t\t\tquantity={product.quantity}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h3>You haven't added any products yet!</h3>\n\t\t\t)}\n\t\t\t{loading ? <img src={spinner} alt=\"loading\" /> : null}\n\t\t</div>\n\t);\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n// replaces useStoreContext\nimport { useSelector, useDispatch } from 'react-redux';\n// utils\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\n\n\nfunction CategoryMenu() {\n\t// const [state, dispatch] = useStoreContext();\n\tconst dispatch = useDispatch();\n\tconst state = useSelector((state) => state);\n\n\tconst { categories } = state;\n\n\tconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n\tuseEffect(() => {\n\t\t// if categoryData exists or has changed from the response of useQuery, then run dispatch()\n\t\tif (categoryData) {\n\t\t\t// execute our dispatch function with our action object indicating the type of action and the data to set our state for cactegories to\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CATEGORIES,\n\t\t\t\tcategories: categoryData.categories\n\t\t\t});\n\t\t\tcategoryData.categories.forEach(category => {\n\t\t\t\tidbPromise('categories', 'put', category);\n\t\t\t});\n\t\t} else if (!loading) {\n\t\t\tidbPromise('categories', 'get').then(categories => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_CATEGORIES,\n\t\t\t\t\tcategories\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [loading, categoryData, dispatch]);\n\n\tconst handleClick = id => {\n\t\tdispatch({\n\t\t\ttype: UPDATE_CURRENT_CATEGORY,\n\t\t\tcurrentCategory: id\n\t\t});\n\t};\n\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Choose a Category:</h2>\n\t\t\t{ categories.map(item => (\n\t\t\t\t<button\n\t\t\t\t\tkey={ item._id }\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\thandleClick(item._id);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{ item.name }\n\t\t\t\t</button>\n\t\t\t)) }\n\t\t</div>\n\t);\n}\n\nexport default CategoryMenu;\n","import React from \"react\";\n// replaces useStoreContext\nimport { useDispatch } from 'react-redux';\n// utils\nimport { idbPromise } from \"../../utils/helpers\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\n// import { useStoreContext } from '../../utils/GlobalState';\n\n\nconst CartItem = ({ item }) => {\n    // const [state, dispatch] = useStoreContext();\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n    };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if (value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n            \n            idbPromise('cart', 'delete', { ...item });\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img\n                    src={ `/images/${item.image}` }\n                    alt=\"\"\n                />\n            </div>\n            <div>\n                <div>{ item.name }, ${ item.price }</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                        type=\"number\"\n                        placeholder=\"1\"\n                        value={ item.purchaseQuantity }\n                        onChange={ onChange }\n                    />\n                    <span\n                        role=\"img\"\n                        aria-label=\"trash\"\n                        onClick={ () => removeFromCart(item) }\n                    >\n                        🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\n// replaces useStoreContext\nimport { useSelector, useDispatch } from 'react-redux';\n// components\nimport CartItem from '../CartItem';\n// utils\nimport Auth from '../../utils/auth';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\n// import { useStoreContext } from '../../utils/GlobalState';\n\n\n// style\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n\nconst Cart = () => {\n    // const [state, dispatch] = useStoreContext();\n    const dispatch = useDispatch();\n    const state = useSelector((state) => state);\n\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({\n                type: ADD_MULTIPLE_TO_CART,\n                products: [...cart]\n            });\n        }\n\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    useEffect(() => {\n        if (data) {\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    }\n\n    function calculatedTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        state.cart.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        });\n\n        getCheckout({\n            variables: { products: productIds }\n        });\n    }\n\n    if (!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick= { toggleCart }>\n                <span\n                    role=\"img\"\n                    aria-label=\"trash\">🛒</span>\n            </div>\n        );\n    }\n    console.log(state);\n\n    return (\n        <div className=\"cart\">\n            <div className=\"close\" onClick={ toggleCart }>[close]</div>\n            <h2>Shopping Cart</h2>\n            { state.cart.length ? (\n                <div>\n                    { state.cart.map(item => (\n                        <CartItem key={ item._id } item={ item } />\n                    )) }\n                    <div className=\"flex-row space-between\">\n                        <strong>Total: ${ calculatedTotal() }</strong>\n                        {\n                            Auth.loggedIn() ?\n                                <button onClick={ submitCheckout }>\n                                    Checkout\n                                </button>\n                                :\n                                <span>(log in to check out)</span>\n                        }\n                    </div>\n                </div>\n            ) : (\n                <h3>\n                    <span role=\"img\" aria-label=\"shocked\">\n                        😱\n                    </span>\n                    You havn't added anything to your cart yet!\n                </h3>\n            ) }\n        </div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<CategoryMenu />\n\t\t\t<ProductList />\n\t\t\t<Cart />\n\t\t</div>\n\t);\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n// replaces useStoreContext\nimport { useSelector, useDispatch } from 'react-redux';\n// components\nimport Cart from '../components/Cart';\n// utils\nimport { idbPromise } from '../utils/helpers';\nimport { QUERY_PRODUCTS } from '../utils/queries';\n// import { useStoreContext } from '../utils/GlobalState';\nimport { \n\tREMOVE_FROM_CART,\n\tUPDATE_CART_QUANTITY,\n\tADD_TO_CART,\n\tUPDATE_PRODUCTS\n} from '../utils/actions';\n// assets\nimport spinner from '../assets/spinner.gif';\n\n\n\n\nfunction Detail() {\n\t// const [state, dispatch] = useStoreContext();\n\tconst dispatch = useDispatch();\n\tconst state = useSelector((state) => state);\n\n\tconst { id } = useParams();\n\n\tconst [currentProduct, setCurrentProduct] = useState({})\n\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\n\tconst { products, cart } = state;\n\n\tconst addToCart = () => {\n\t\t// find the cart item with the matching id\n\t\tconst itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n\t\t// if there was a match, call the UPDATE with a new purchase quantity\n\t\tif (itemInCart) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\n\t\t\t\t_id: id,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n\t\t\t});\n\t\t\t// if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n\t\t\tidbPromise('cart', 'put', {\n\t\t\t\t...itemInCart,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n\t\t\t});\n\t\t} else {\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_TO_CART,\n\t\t\t\tproduct: { ...currentProduct, purchaseQuantity: 1 }\n\t\t\t});\n\t\t\t// if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n\t\t\tidbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n\t\t}\n\t};\n\n\tconst removeFromCart = () => {\n\t\tdispatch({\n\t\t\ttype: REMOVE_FROM_CART,\n\t\t\t_id: currentProduct._id\n\t\t});\n\n\t\t// upon removal from cart, delete item from IndexedDB using the `currentProduct._id` to locate what yo remove\n\t\tidbPromise('cart', 'delete', { ...currentProduct });\n\t};\n\n\tuseEffect(() => {\n\t\t// already in global store\n\t\tif (products.length) {\n\t\t\tsetCurrentProduct(products.find(product => product._id === id));\n\t\t// retrieved from server\n\t\t} else if (data) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\tproducts: data.products\n\t\t\t});\n\n\t\t\tdata.products.forEach((product) => {\n\t\t\t\tidbPromise('products', 'put', product);\n\t\t\t});\n\t\t// get cache from idb\n\t\t} else if (!loading) {\n\t\t\tidbPromise('products', 'get').then((indexedProducts) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\t\tproducts: indexedProducts\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [products, data, loading, dispatch, id]);\n\n\n\treturn (\n\t\t<>\n\t\t\t{currentProduct ? (\n\t\t\t\t<div className=\"container my-1\">\n\t\t\t\t\t<Link to=\"/\">← Back to Products</Link>\n\n\t\t\t\t\t<h2>{currentProduct.name}</h2>\n\n\t\t\t\t\t<p>{currentProduct.description}</p>\n\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<strong>Price:</strong>${currentProduct.price}{' '}\n\t\t\t\t\t\t<button onClick={ addToCart }>Add to Cart</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tdisabled={ !cart.find(p => p._id === currentProduct._id) }\n\t\t\t\t\t\t\tonClick={ removeFromCart }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRemove from Cart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`/images/${currentProduct.image}`}\n\t\t\t\t\t\talt={currentProduct.name}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t\t{loading ? <img src={spinner} alt=\"loading\" /> : null}\n\t\t\t<Cart />\n\t\t</>\n\t);\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\n// components\nimport Jumbotron from '../components/Jumbotron';\n// utils\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                });\n            }\n        }\n\n        \n        saveOrder();\n        setTimeout(() => {\n            window.location.assign('/');\n        }, 3000);\n    }, [addOrder]);\n\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>Thank you for your purchase!</h2>\n                <h2>You will now be redirected to the homepage</h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","// remove `useReducer()`\n// import { useReducer } from 'react';\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\n// create initialState for the reuder to use\nconst initialState = {\n    products: [],\n    currentProduct: {},\n    categories: [],\n    currentCategory: {},\n    // any cart state?\n    cart: [],\n    cartOpen: true\n}\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n\n        // if action type value of the value of `UPEDATE_CURRENT_CATEGORY`, return a new state object with an updated current category array\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n\n        // if it's none of these actions, do not update state at all and keep things the same!\n        default:\n            return state;\n    }\n};\n\n// // Not needed anymore after redux refactor\n// export function useProductReducer(initialState) {\n//     return useReducer(reducer, initialState);\n// };\n\n// exporting... ... ...\nexport default reducer;","// // New file to create and export the Redux store we want to\n// // use instead of React's createContext/useContext\nimport { createStore } from 'redux';\nimport reducer from './reducers';\n\n// exporting... ... ...\nexport default createStore(reducer);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n\tApolloClient,\n\tInMemoryCache,\n\tApolloProvider,\n\tcreateHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n// components/pages\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n// utils\n// remove StoreProvider and replace it with the new (Redux) Provider\n// import { StoreProvider } from './utils/GlobalState';\nimport { Provider } from 'react-redux';\nimport store from './utils/store';\n\n\nconst httpLink = createHttpLink({\n\turi: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n\tconst token = localStorage.getItem('id_token');\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `Bearer ${token}` : '',\n\t\t},\n\t};\n});\n\nconst client = new ApolloClient({\n\tlink: authLink.concat(httpLink),\n\tcache: new InMemoryCache(),\n});\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={ client }>\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t{/* use the new `Provider` and the new `store` we created */}\n\t\t\t\t\t<Provider store={ store }>\n\t\t\t\t\t\t<Nav />\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path=\"/\" component={ Home } />\n\t\t\t\t\t\t\t<Route exact path=\"/login\" component={ Login } />\n\t\t\t\t\t\t\t<Route exact path=\"/signup\" component={ Signup } />\n\t\t\t\t\t\t\t<Route exact path=\"/orderHistory\" component={ OrderHistory } />\n\t\t\t\t\t\t\t<Route exact path=\"/products/:id\" component={ Detail } />\n\t\t\t\t\t\t\t<Route exact path=\"/success\" component={ Success } />\n\t\t\t\t\t\t\t<Route component={ NoMatch } />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Provider>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ApolloProvider>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}